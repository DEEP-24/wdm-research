generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid()) @map("id")
  firstName String
  lastName  String

  email    String @unique
  password String

  imageURL String

  researchInterests String
  expertise         String

  lastPasswordResetAt DateTime?

  role UserRole

  phone   String
  street  String
  aptNo   String
  city    String
  state   String
  zipcode String
  dob     DateTime

  linkedInURL String?
  twitterURL  String?
  githubURL   String?
  papers      String?

  events Event[]

  registrations EventRegistration[]

  followers  Followers[] @relation("follower")
  followings Followers[] @relation("following")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Followers {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("followers")
}

model Event {
  id                   String    @id @default(uuid()) @map("id")
  title                String
  description          String?
  startDate            DateTime?
  endDate              DateTime?
  location             String?
  isVirtual            Boolean   @default(false)
  maxAttendees         Int?
  registrationDeadline DateTime?
  status               String?

  sessions      EventSession[]
  registrations EventRegistration[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model EventSession {
  id           String    @id @default(uuid()) @map("id")
  title        String
  description  String?
  startTime    DateTime?
  endTime      DateTime?
  location     String?
  maxAttendees Int?

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  registrations EventRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("event_sessions")
}

model EventRegistration {
  id          String   @id @default(uuid()) @map("id")
  bookingDate DateTime @default(now())

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  session   EventSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("event_registrations")
}

model ProjectProposal {
  id              String           @id @default(uuid()) @map("id")
  userId          String           @db.Char(36)
  title           String
  description     String?
  status          String?
  submittedAt     DateTime         @default(now()) @db.Timestamp(6)
  proposalReviews ProposalReview[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_proposals")
}

model ProposalReview {
  id         String   @id @default(uuid()) @map("id")
  proposalId String   @db.Char(36)
  reviewerId String   @db.Char(36)
  feedback   String?
  reviewedAt DateTime @default(now()) @db.Timestamp(6)

  ProjectProposal   ProjectProposal? @relation(fields: [projectProposalId], references: [id])
  projectProposalId String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("proposal_reviews")
}

enum UserRole {
  ADMIN
  ORGANIZER
  INVESTOR
  USER
}
